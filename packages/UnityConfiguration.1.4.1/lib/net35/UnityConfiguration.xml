<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnityConfiguration</name>
    </assembly>
    <members>
        <member name="T:UnityConfiguration.AddAllConvention">
            <summary>
            Convention for registering several types implementing the same interface.
            By default it is registered with the name of the type, but this can be overridden.
            </summary>
        </member>
        <member name="T:UnityConfiguration.IAssemblyScannerConvention">
            <summary>
            Interface implemented by all scanner conventions. 
            Defines a method to process each type the scanner finds.
            </summary>
        </member>
        <member name="T:UnityConfiguration.IHideObjectMembers">
            <remarks>
            Created by Daniel Cazzulino http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx
            </remarks>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScannerConvention.Process(System.Type,UnityConfiguration.IUnityRegistry)">
            <summary>
            Gets called for each type the <see cref="T:UnityConfiguration.IAssemblyScanner"/> finds.
            </summary>
            <param name="type">The type to process.</param>
            <param name="registry">
            The instance of the <see cref="T:UnityConfiguration.IUnityRegistry"/> 
            that can be used to register the type.
            </param>
        </member>
        <member name="M:UnityConfiguration.ILifetimePolicyExpression.Using``1">
            <summary>
            Specify how lifetime should be managed by the container, by specifying a <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Microsoft.Practices.Unity.LifetimeManager"/> to use.</typeparam>
        </member>
        <member name="M:UnityConfiguration.AddAllConvention.TypesImplementing``1">
            <summary>
            Specify the type to register multiple instances of.
            </summary>
            <typeparam name="T">The type to register multiple instances of.</typeparam>
            <returns>
            An instance of the <see cref="T:UnityConfiguration.AddAllConvention"/> that can be used to
            further configure the convention.
            </returns>
        </member>
        <member name="M:UnityConfiguration.AddAllConvention.TypesImplementing(System.Type)">
            <summary>
            Specify the type to register multiple instances of.
            </summary>
            <param name="type">The type to register multiple instances of.</param>
            <returns>
            An instance of the <see cref="T:UnityConfiguration.AddAllConvention"/> that can be used to
            further configure the convention.
            </returns>
        </member>
        <member name="M:UnityConfiguration.AddAllConvention.WithName(System.Func{System.Type,System.String})">
            <summary>
            Specify how to resolve the name for the registration.
            </summary>
            <param name="func">The function to create the name for the specified type.</param>
            <returns>
            An instance of the <see cref="T:UnityConfiguration.AddAllConvention"/> that can be used to
            further configure the convention.
            </returns>
        </member>
        <member name="T:UnityConfiguration.ConventionExtensions">
            <summary>
            Extends the <see cref="T:UnityConfiguration.IAssemblyScanner"/> with convenion methods for configuring the conventions.
            </summary>
        </member>
        <member name="M:UnityConfiguration.ConventionExtensions.ForRegistries(UnityConfiguration.IAssemblyScanner)">
            <summary>
            Adds a convention to the scanner that will look for and include all <see cref="T:UnityConfiguration.UnityRegistry"/> derived classes it finds.
            </summary>
        </member>
        <member name="M:UnityConfiguration.ConventionExtensions.WithFirstInterfaceConvention(UnityConfiguration.IAssemblyScanner)">
            <summary>
            Adds a convention to the scanner that registers all types by the first interface defined for the type.
            </summary>
        </member>
        <member name="M:UnityConfiguration.ConventionExtensions.WithNamingConvention(UnityConfiguration.IAssemblyScanner)">
            <summary>
            Adds a convention to the scanner that registers all types by a naming convention.
            By default it tries to find an interface with the same name as the
            service, prefixed with an I, but this can be overridden.
            </summary>
        </member>
        <member name="M:UnityConfiguration.ConventionExtensions.WithAddAllConvention(UnityConfiguration.IAssemblyScanner)">
            <summary>
            Adds a convention to the scanner that registers several types implementing the same interface.
            By default it is registered with the name of the type, but this can be overridden.
            </summary>
        </member>
        <member name="M:UnityConfiguration.ConventionExtensions.WithSetAllPropertiesConvention(UnityConfiguration.IAssemblyScanner)">
            <summary>
            Adds a convention to the scanner that looks for a writable property of a specified type
            and configures injection for it. Mostly useful for optional dependencies like loggers etc.
            </summary>
        </member>
        <member name="M:UnityConfiguration.IRegistrationExpression.WithConstructorArguments(System.Object[])">
            <summary>
            Specify arguments that will be passed to the constructor when constructing the type.
            If some of the parameters should be resolved from the container, specify its type.
            </summary>
            <param name="args">Value or type of the parameters.</param>
            <example>
            WithConstructorArguments(42, "some string", typeof(IBar));
            </example>
        </member>
        <member name="M:UnityConfiguration.INamedRegistrationExpression.WithName(System.String)">
            <summary>
            Specify a name for this registration mapping.
            </summary>
            <param name="name">The name for this registration mapping.</param>
        </member>
        <member name="M:UnityConfiguration.LifetimeExtensions.AsSingleton(UnityConfiguration.ILifetimePolicyExpression)">
            <summary>
            Indicates that only a single instance should be created, and then
            it should be re-used for all subsequent requests.
            </summary>
        </member>
        <member name="M:UnityConfiguration.LifetimeExtensions.AsTransient(UnityConfiguration.ILifetimePolicyExpression)">
            <summary>
            Indicates that instances should not be re-used, nor have
            their lifecycle managed by Unity.
            </summary>
        </member>
        <member name="M:UnityConfiguration.LifetimeExtensions.AsPerThread(UnityConfiguration.ILifetimePolicyExpression)">
            <summary>
            Indicates that instances should be re-used within the same thread.
            </summary>
        </member>
        <member name="M:UnityConfiguration.LifetimeExtensions.AsPerResolve(UnityConfiguration.ILifetimePolicyExpression)">
            <summary>
            Indicates that instances should be re-used within the same build up object graph.
            </summary>
        </member>
        <member name="M:UnityConfiguration.LifetimeExtensions.AsExternallyControlled(UnityConfiguration.ILifetimePolicyExpression)">
            <summary>
            Indicates that Unity maintains only a weak reference to the objects it creates.
            Instances are re-used as long as the weak reference is alive.
            </summary>
        </member>
        <member name="M:UnityConfiguration.LifetimeExtensions.AsHierarchicalControlled(UnityConfiguration.ILifetimePolicyExpression)">
            <summary>
            Acts like a singleton, except that in the presence of child containers, 
            each child gets it's own instance of the object, instead of sharing one in the common parent.
            </summary>
        </member>
        <member name="T:UnityConfiguration.NamingConvention">
            <summary>
            Convention for registering all types by a naming convention.
            By default it tries to find an interface with the same name as the
            service, prefixed with an I, but this can be overridden.
            </summary>
        </member>
        <member name="M:UnityConfiguration.NamingConvention.WithInterfaceName(System.Func{System.Type,System.String})">
            <summary>
            Specify how to resolve the name of the interface.
            </summary>
            <param name="func">The function to create the name of the interface.</param>
        </member>
        <member name="M:UnityConfiguration.PostBuildUpExpression`1.Call(System.Action{Microsoft.Practices.Unity.IUnityContainer,`0})">
            <summary>
            Call a method or a property setter on the instance after it is constructed.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:UnityConfiguration.PostBuildUpExpression`1.DecorateWith(System.Func{Microsoft.Practices.Unity.IUnityContainer,`0,System.Object})">
            <summary>
            Decorate the instance with another class after it is constructed.
            </summary>
            <param name="func">The function used to construct the class to decorate with.</param>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.Assembly(System.Reflection.Assembly)">
            <summary>
            Add an assembly to scan.
            </summary>
            <param name="assembly">The assembly to scan.</param>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.Assembly(System.String)">
            <summary>
            Add an assembly to scan given its display name.
            </summary>
            <param name="assemblyName">The display name of the assembly to scan (e.g. UnityConfiguration).</param>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.AssemblyContaining``1">
            <summary>
            Add an assembly to scan by specifying a type it contains.
            </summary>
            <typeparam name="T">A type that resides in the assembly to scan.</typeparam>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.AssembliesInBaseDirectory">
            <summary>
            Add all assemblies in the application base directory of the current app domain to the scanner.
            </summary>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.AssembliesInBaseDirectory(System.Predicate{System.Reflection.Assembly})">
            <summary>
            Add all assemblies in the application base directory of the current app domain to the scanner.
            </summary>
            <param name="predicate">A predicate used for filtering out assemblies.</param>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.AssembliesInDirectory(System.String)">
            <summary>
            Add all assemblies in the specified path to the scanner.
            </summary>
            <param name="path">The path to scan for assemblies.</param>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.AssembliesInDirectory(System.String,System.Predicate{System.Reflection.Assembly})">
            <summary>
            Add all assemblies in the specified path to the scanner.
            </summary>
            <param name="path">The path to scan for assemblies.</param>
            <param name="predicate">A predicate used for filtering out assemblies.</param> 
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.InternalTypes">
            <summary>
            Include internal types in an assembly when scanning.
            </summary>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.With``1">
            <summary>
            Add a convention to use when scanning.
            </summary>
            <typeparam name="TConvention">The type of the convention.</typeparam>
            <returns>An instance of the convention that can be used for configuring the convention.</returns>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.ExcludeType``1">
            <summary>
            Exclude the specified type when scanning.
            </summary>
            <typeparam name="T">Type of which to exclude.</typeparam>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.Exclude(System.Predicate{System.Type})">
            <summary>
            Exclude types that match the specified predicate when scanning. 
            </summary>
            <param name="exclude">The predicate to use for matching.</param>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.ExcludeNamespaceContaining``1">
            <summary>
            Exclude all types in the same namespace as the specified type or its sub namespaces
            when scanning.
            </summary>
            <typeparam name="T">A type in the namespace to exclude.</typeparam>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.ExcludeNamespace(System.String)">
            <summary>
            Exclude all types in the specified namespace or its sub namespaces when scanning.
            </summary>
            <param name="namespace">The namespace to exclude.</param>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.Include(System.Predicate{System.Type})">
            <summary>
            Only include types that match the specified predicate when scanning.
            </summary>
            <param name="include">The predicate to use for matching.</param>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.IncludeNamespaceContaining``1">
            <summary>
            Only include types in the same namespace as the specified type or its sub namespaces
            when scanning.
            </summary>
            <typeparam name="T">A type in the namespace to include.</typeparam>
        </member>
        <member name="M:UnityConfiguration.IAssemblyScanner.IncludeNamespace(System.String)">
            <summary>
            Only include types in the specified namespace or its sub namespaces when scanning.
            </summary>
            <param name="namespace">The namespace to include.</param>
        </member>
        <member name="M:UnityConfiguration.FactoryRegistrationExpression`1.WithName(System.String)">
            <summary>
            Specify a name for this registration.
            </summary>
            <param name="name">The name for this registration.</param>
        </member>
        <member name="T:UnityConfiguration.ScanForRegistriesConvention">
            <summary>
            Convention that looks for <see cref="T:UnityConfiguration.UnityRegistry"/> and imports it
            into the current <see cref="T:UnityConfiguration.UnityRegistry"/>.
            </summary>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.Scan(System.Action{UnityConfiguration.IAssemblyScanner})">
            <summary>
            Scan a set of assemblies.
            </summary>
            <param name="action">A nested closure for configuring the <see cref="T:UnityConfiguration.IAssemblyScanner"/>.</param>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.AddRegistry``1">
            <summary>
            Import a <see cref="T:UnityConfiguration.UnityRegistry"/> into this.
            </summary>
            <typeparam name="T">Type of the <see cref="T:UnityConfiguration.UnityRegistry"/> to import.</typeparam>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.AddRegistry(UnityConfiguration.UnityRegistry)">
            <summary>
            Import a <see cref="T:UnityConfiguration.UnityRegistry"/> into this.
            </summary>
            <param name="registry">An instance of the <see cref="T:UnityConfiguration.UnityRegistry"/> to import.</param>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.Register(System.Type,System.Type)">
            <summary>
            Register a type mapping in the container.
            </summary>
            <param name="typeFrom">The type that will be requested.</param>
            <param name="typeTo">The type that will actually be returned.</param>
            <returns>
            An instance of a <see cref="T:UnityConfiguration.RegistrationExpression"/> that can be used to 
            further configure the registration.
            </returns>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.Register``2">
            <summary>
            Register a type mapping in the container.
            </summary>
            <typeparam name="TFrom">The type that will be requested.</typeparam>
            <typeparam name="TTo">The type that will actually be returned.</typeparam>
            <returns>
            An instance of a <see cref="T:UnityConfiguration.RegistrationExpression"/> that can be used to 
            further configure the registration.
            </returns>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.Register``1(System.Func{Microsoft.Practices.Unity.IUnityContainer,``0})">
            <summary>
            Register a type mapping in the container by using a factory delegate.
            </summary>
            <typeparam name="TFrom">The type that will be requested.</typeparam>
            <param name="factoryDelegate">The factory delegate that will be used to 
            construct the type that will actually be returned.</param>
            <returns>
            An instance of a <see cref="T:UnityConfiguration.FactoryRegistrationExpression`1"/> that can be used to 
            further configure the registration.
            </returns>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.Configure(System.Type)">
            <summary>
            Configure a type mapping in the container.
            </summary>
            <param name="type">The type to configure. Can be both the requested or the returned type.</param>
            <returns>
            An instance of a <see cref="T:UnityConfiguration.RegistrationExpression"/> that can be used to 
            further configure the registration.
            </returns>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.Configure``1">
            <summary>
            Configure a type mapping in the container.
            </summary>
            <typeparam name="T">The type to configure. Can be both the requested or the returned type.</typeparam>
            <returns>
            An instance of a <see cref="T:UnityConfiguration.RegistrationExpression"/> that can be used to 
            further configure the registration.
            </returns>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.MakeSingleton``1">
            <summary>
            A shortcut method to make a registered type a singleton. Mostly useful for making types registered 
            by a convention.
            </summary>
            <typeparam name="T">The type to make singleton. Can be both an interface or a concrete type.</typeparam>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.MakeSingleton``1(System.String)">
            <summary>
            A shortcut method to make a registered type a singleton. Mostly useful for making types registered 
            by a convention.
            </summary>
            <typeparam name="T">The type to make singleton. Can be both an interface or a concrete type.</typeparam>
            <param name="namedInstance">Name of the instance.</param>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.ConfigureCtorArgsFor``1(System.Object[])">
            <summary>
            Specify parameters that will be passed to the constructor when constructing the type.
            If some of the parameters should be resolved from the container, specify its type.
            </summary>
            <typeparam name="T">The type to configure.</typeparam>
            <param name="args">Value or type of the parameters.</param>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.SelectConstructor``1(System.Type[])">
            <summary>
            Select the constructor to be used when constructing the type by specifying 
            the types of the parameters in the constructor to use.
            </summary>
            <typeparam name="T">The type to configure.</typeparam>
            <param name="args">The types of the parameters or empty to specify default constructor.</param>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.AddExtension``1">
            <summary>
            Add a <see cref="T:Microsoft.Practices.Unity.UnityContainerExtension"/> to the container.
            </summary>
            <typeparam name="T">Type of the extension to add.</typeparam>
            <returns></returns>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.ConfigureExtension``1(System.Action{``0})">
            <summary>
            Confgure an extension already registered in the container.
            </summary>
            <typeparam name="T">Type of the extension to configure.</typeparam>
            <param name="configAction">A nested closure that can be used to configure the extension.</param>
            <returns></returns>
        </member>
        <member name="M:UnityConfiguration.IUnityRegistry.AfterBuildingUp``1">
            <summary>
            Allows for some actions to be applied to a type after it is constructed.
            </summary>
            <typeparam name="T">The type to apply actions on.</typeparam>
            <returns>
            An instance of a <see cref="T:UnityConfiguration.PostBuildUpExpression`1"/> that holds the actions
            that can be applied.
            </returns>
        </member>
        <member name="T:UnityConfiguration.FirstInterfaceConvention">
            <summary>
            Convention for registering all types by the first interface defined for the type.
            </summary>
        </member>
        <member name="M:UnityConfiguration.FirstInterfaceConvention.IgnoreInterfacesOnBaseTypes">
            <summary>
            Determines whether or not to ignore interfaces on base types. Default false.
            </summary>
        </member>
        <member name="T:UnityConfiguration.SetAllPropertiesConvention">
            <summary>
            Convention that looks for a writable property of a specified type
            and configures injection for it. Mostly useful for optional dependencies
            like loggers etc.
            </summary>
        </member>
        <member name="M:UnityConfiguration.SetAllPropertiesConvention.OfType``1">
            <summary>
            Specify the type of the property to inject.
            </summary>
            <typeparam name="T">The type of the property to inject.</typeparam>
        </member>
        <member name="M:UnityConfiguration.UnityExtension.Configure(Microsoft.Practices.Unity.IUnityContainer,System.Action{UnityConfiguration.IUnityRegistry})">
            <summary>
            Configure an instance of an <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/>.
            </summary>
            <param name="container">The container to configure.</param>
            <param name="expression">An expression used for configuring the container.</param>
        </member>
    </members>
</doc>
